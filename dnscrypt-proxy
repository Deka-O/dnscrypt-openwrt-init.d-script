#!/bin/sh /etc/rc.common

# Derived from the init.d script provided by
# https://github.com/jedisct1/dnscrypt-proxy/
# Copyright (c) 2018
# Frank Denis <j at pureftpd dot org>
#
# Contributor: Github user Deka-O <dek at btr dot zone>

START=18
# Start before dnsmasq which has a START value of 19

NAME="DNSCrypt"
EXTRA_COMMANDS="status"
EXTRA_HELP="        status  Display the status of the service"
EXEC="dnscrypt-proxy"
# Name of the executable
# No need to be changed unless it is chosen to rename the main executable
#
# default: dnscrypt-proxy

CMD=$EXEC

DIR="/opt/$EXEC"
###SETUP: Set the directory where your dnscrypt-proxy resides
# Can be commented out/empty if the dnscrypt executable is in $PATH
#
# default: /opt/dnscrypt-proxy

CONF="/etc/$EXEC/$EXEC.toml"
###SETUP: Set the path to your dnscrypt-proxy config
# Can be commented out/empty if a 'dnscrypt-proxy.toml' file exits
# in the same directory as the dnscrypt-proxy executable,
# as that will be used if no config is provided as an argument
#
# default: /etc/dnscrypt-proxy/dnscrypt-proxy.toml


if [ -n "$DIR" ]; then
        CMD="$DIR/$CMD"
	# Prefix directory to $CMD in-case $DIR is set
fi

if [ -n "$CONF" ]; then
	CMD="$CMD -config $CONF"
	# Append config command-line option with argument in-case $CONF is set
fi

# commandline(CMD) with default parameters will evaluate to
# /opt/dnscrypt-proxy/dnscrypt-proxy -conf /etc/dnscrypt-proxy/dnscrypt-proxy.toml

PID_FILE="/var/run/$EXEC.pid"

SYSLOG=1
# Disable SYSLOG to log to dedicated log files
# syslog logging is enabled by default and can be configured in the dnscrypt-proxy.toml
# If syslog is used, dnscrypt-proxy will not log to stdout and stderr
# which would result in the log files defined just below to be just empty
# that is why we disable them beforehand
# default: syslog is turned on

if [ $SYSLOG != "1" ]; then
        STDOUT_LOG="/var/log/$EXEC.log"
        STDERR_LOG="/var/log/$EXEC.err"
fi

get_pid() {
	cat "$PID_FILE"
}

is_running() {
	[ -f "$PID_FILE" ] && \
	ps | grep  $(get_pid) | grep "$EXEC" &> /dev/null
}

start() {
	if is_running; then
		echo "$NAME is already started"
	else
		echo "Starting $NAME"
		if [ $SYSLOG == 1 ]; then
			$CMD &> /dev/null &
		else
			$CMD >> "$STDOUT_LOG" 2>> "$STDERR_LOG" &
		fi
		echo $! > "$PID_FILE"
		if ! is_running; then
			echo -n "Unable to start $NAME, see "
			if [ $SYSLOG == 1 ]; then
				echo "syslog via logread command"
			else
				echo "$STDOUT_LOG and $STDERR_LOG"
			fi
		fi
	fi
}

stop() {
	if is_running; then
		echo -n "Stopping $NAME..."
		kill $(get_pid)
		for i in $(seq 1 10)
			do
				if ! is_running; then
					break
				fi
				echo -n "."
				sleep 1
			done
			echo ""
			if is_running; then
				echo "Not stopped; may still be shutting down or shutdown may have failed"
			else
				echo "Stopped"
				if [ -f "$PID_FILE" ]; then
					rm "$PID_FILE"
				fi
			fi
	else
		echo "$NAME is not running"
	fi
}

restart() {
	stop
	if is_running; then
		echo "Unable to stop $NAME, will not attempt to start"
	fi
	start
}

status() {
	if is_running; then
		echo "$NAME is running under PID:$(get_pid)"
	else
		echo "$NAME is not running"
	fi
}
